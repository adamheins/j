#!/usr/bin/env zunit

@setup {
  test_dir=$(mktemp -d)
  J_DIR="$test_dir/.j"
  mkdir -p "$J_DIR/data"

  load ../j.zsh
}


@teardown {
  rm -r "$test_dir"
}


@test 'Add directory' {
  dir="$test_dir/foo"
  mkdir "$dir"

  run j::add_directory "$dir"

  key="$(basename $dir)"

  assert "$J_DATA_DIR/$key" is_file

  run j::list_paths_from_file "$J_DATA_DIR/$key"

  assert "$output" same_as "$dir"
}


@test 'Add directory with space' {
  dir="$test_dir/foo bar"
  mkdir "$dir"

  run j::add_directory "$dir"

  key="$(basename $dir)"

  assert "$J_DATA_DIR/$key" is_file

  run j::list_paths_from_file "$J_DATA_DIR/$key"

  assert "$output" same_as "$dir"
}


@test 'Add multiple directories' {
  dir1="$test_dir/foo"
  dir2="$test_dir/bar"

  mkdir "$dir1"
  mkdir "$dir2"

  run j::add_directory "$dir1"
  run j::add_directory "$dir2"

  key1=$(basename $dir1)
  key2=$(basename $dir2)

  run cut -d' ' -f2- "$J_DATA_DIR/$key1"
  assert "$output" contains "$dir1"

  run cut -d' ' -f2- "$J_DATA_DIR/$key2"
  assert "$output" contains "$dir2"
}


@test 'Add repeat directory' {
  dir="$test_dir/foo"
  mkdir "$dir"

  run j::add_directory "$dir"
  run j::add_directory "$dir"

  key=$(basename $dir)

  run wc -l < "$J_DATA_DIR/$key"

  assert $output equals 1
}


@test 'Add repeat basename' {
  dir1="$test_dir/foo"
  key=$(basename $dir1)
  dir2="$test_dir/bar/$key"

  mkdir "$dir1"
  mkdir -p "$dir2"

  run j::add_directory "$dir1"
  run j::add_directory "$dir2"

  run wc -l < "$J_DATA_DIR/$key"

  assert $output equals 2
}


@test 'Add ignored directory' {
  echo '*/foo' >> "$J_DIR/ignore"
  dir="$test_dir/foo"
  mkdir "$dir"

  # check that directory is correctly identified as ignored
  run j::is_ignored "$dir"
  assert $state equals 0

  run j::add_directory "$dir"

  key=$(basename $dir)

  [ -f "$J_DATA_DIR/$key" ] && fail "File exists"
}


@test 'Add cwd' {
  dir="$test_dir/foo"
  mkdir "$dir"

  cd "$dir"
  run j::add_cwd

  key=$(basename $dir)

  assert "$J_DATA_DIR/$key" is_file

  run j::list_paths_from_file "$J_DATA_DIR/$key"

  assert "$output" same_as "$dir"
}


@test 'Add directory starting with --' {
  dir="$test_dir/--foo"
  mkdir -- "$dir"

  run j::add_directory "$dir"

  key="$(basename $dir)"

  assert "$J_DATA_DIR/$key" is_file

  run j::list_paths_from_file "$J_DATA_DIR/$key"

  assert "$output" same_as "$dir"
}


@test 'Add repeated -- basename' {
  dir1="$test_dir/--foo"
  key=$(basename $dir1)
  dir2="$test_dir/bar/$key"

  mkdir "$dir1"
  mkdir -p "$dir2"

  run j::add_directory "$dir1"
  run j::add_directory "$dir2"

  run wc -l < "$J_DATA_DIR/$key"

  assert $output equals 2
}


@test 'cd to directory' {
  dir="$test_dir/foo"
  mkdir "$dir"
  key=$(basename $dir)

  j::add_directory "$dir"
  j "$key"

  assert "$PWD" same_as "$dir"
}


@test 'cd to directory with space' {
  dir="$test_dir/foo bar"
  mkdir "$dir"
  key=$(basename $dir)

  j::add_directory "$dir"
  j "$key"

  assert "$PWD" same_as "$dir"
}


@test 'cd to directory with --option collision' {
  dir="$test_dir/--help"
  mkdir -- "$dir"
  key=$(basename $dir)

  j::add_directory "$dir"
  j -- "$key"

  assert "$PWD" same_as "$dir"
}


@test 'cd to previous directory' {
  dir1="$test_dir/foo"
  dir2="$test_dir/bar"

  mkdir "$dir1"
  mkdir "$dir2"

  j::add_directory "$dir1"
  j::add_directory "$dir2"
  j -

  assert "$PWD" same_as "$dir1"
}


@test 'clean nonexistent directory' {
  dir="$test_dir/foo"

  # we need to make it first so j adds it
  mkdir "$dir"

  key=$(basename $dir)

  run j::add_directory "$dir"

  # check that the directory is there
  run j::list_paths_from_file "$J_DATA_DIR/$key"
  assert "$output" same_as "$dir"

  rm -r "$dir"

  # clean up - the file should be deleted since it becomes empty
  run j --clean

  [ -f "$J_DATA_DIR/$key" ] && fail "File exists"
}


@test 'clean old directory' {
  dir="$test_dir/foo"
  mkdir "$dir"

  key=$(basename $dir)

  run j::add_directory "$dir"

  # check that the directory is there
  run j::list_paths_from_file "$J_DATA_DIR/$key"
  assert "$output" same_as "$dir"

  # clean up all entries over 0 days old (i.e. all of them)
  run j --clean 0

  [ -f "$J_DATA_DIR/$key" ] && fail "File exists"
}
